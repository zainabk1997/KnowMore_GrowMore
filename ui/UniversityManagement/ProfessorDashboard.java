/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.UniversityManagement;

import businesslogic.EcoSystem;
import businesslogic.PersonU;
import businesslogic.UniversityManagement.Course;
import businesslogic.UniversityManagement.CourseAssignment;
import businesslogic.UniversityManagement.PlacementCoordinator;
import businesslogic.UniversityManagement.Professor;
import businesslogic.UniversityManagement.StudentU;
import businesslogic.helper.NumberValidator;
import ui.school.SchoolAdminRole.*;
import java.awt.CardLayout;
import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Address;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import ui.MainJFrame;

/**
 *
 * @author drashtibhingradiya
 */
public class ProfessorDashboard extends javax.swing.JPanel {

    /**
     * Creates new form DashboardJPanel
     */
   private EcoSystem ecoSystem;
   private Professor person;
    
    public ProfessorDashboard(EcoSystem ecoSystem, Professor person) {
        initComponents();
        this.ecoSystem = ecoSystem;
        this.person = person;
        setSize(1060, 770);
        workAreaPanel.setVisible(true);
        gradesPanel.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DashboardPanel = new javax.swing.JSplitPane();
        leftPane = new javax.swing.JPanel();
        btnGrades = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        rightPane = new javax.swing.JLayeredPane();
        workAreaPanel = new javax.swing.JPanel();
        workAreaPane = new javax.swing.JLabel();
        gradesPanel = new javax.swing.JPanel();
        studentSplitPane1 = new javax.swing.JSplitPane();
        navigateBackPanel1 = new javax.swing.JPanel();
        btnBackTranscript = new javax.swing.JButton();
        btnLogoutTranscript = new javax.swing.JButton();
        lblManageGrades = new javax.swing.JLabel();
        studentWorkAreaPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCourseAssignments = new javax.swing.JTable();
        txtStudentFirstName = new javax.swing.JTextField();
        txtCourseName = new javax.swing.JTextField();
        lblCourseID = new javax.swing.JLabel();
        lblCourseName = new javax.swing.JLabel();
        txtGrade = new javax.swing.JTextField();
        lblGrade = new javax.swing.JLabel();
        txtStudentIDTranscript = new javax.swing.JTextField();
        lblCurrentSemester1 = new javax.swing.JLabel();
        lblStudentIDTranscript = new javax.swing.JLabel();
        comboSemester1 = new javax.swing.JComboBox<>();
        btnUpdateGrade = new javax.swing.JButton();
        lblStudentFirstName = new javax.swing.JLabel();
        txtCourseID = new javax.swing.JTextField();
        btnViewGrade = new javax.swing.JButton();
        lblCourseDescription = new javax.swing.JLabel();
        txtCourseDescription = new javax.swing.JTextField();
        btnSendGrades = new javax.swing.JButton();

        leftPane.setBackground(new java.awt.Color(0, 153, 153));

        btnGrades.setText("Manage Grades");
        btnGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGradesActionPerformed(evt);
            }
        });

        btnLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout.png"))); // NOI18N
        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftPaneLayout = new javax.swing.GroupLayout(leftPane);
        leftPane.setLayout(leftPaneLayout);
        leftPaneLayout.setHorizontalGroup(
            leftPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGrades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        leftPaneLayout.setVerticalGroup(
            leftPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPaneLayout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addComponent(btnGrades)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLogOut)
                .addContainerGap(601, Short.MAX_VALUE))
        );

        DashboardPanel.setLeftComponent(leftPane);

        rightPane.setLayout(new java.awt.CardLayout());

        workAreaPanel.setBackground(new java.awt.Color(255, 255, 255));
        workAreaPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workAreaPane.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/blue.jpeg"))); // NOI18N
        workAreaPanel.add(workAreaPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 940));

        rightPane.add(workAreaPanel, "card2");

        studentSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        navigateBackPanel1.setBackground(new java.awt.Color(0, 0, 0));

        btnBackTranscript.setText("Back");

        btnLogoutTranscript.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout.png"))); // NOI18N
        btnLogoutTranscript.setText("Log Out");
        btnLogoutTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutTranscriptActionPerformed(evt);
            }
        });

        lblManageGrades.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblManageGrades.setForeground(new java.awt.Color(255, 255, 255));
        lblManageGrades.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManageGrades.setText("Manage Grades");

        javax.swing.GroupLayout navigateBackPanel1Layout = new javax.swing.GroupLayout(navigateBackPanel1);
        navigateBackPanel1.setLayout(navigateBackPanel1Layout);
        navigateBackPanel1Layout.setHorizontalGroup(
            navigateBackPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigateBackPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnBackTranscript)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                .addComponent(lblManageGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(202, 202, 202)
                .addComponent(btnLogoutTranscript)
                .addGap(48, 48, 48))
        );
        navigateBackPanel1Layout.setVerticalGroup(
            navigateBackPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigateBackPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(navigateBackPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackTranscript)
                    .addComponent(btnLogoutTranscript)
                    .addComponent(lblManageGrades))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        studentSplitPane1.setTopComponent(navigateBackPanel1);

        studentWorkAreaPanel1.setBackground(new java.awt.Color(37, 150, 190));

        tblCourseAssignments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student Name", "Student ID", "Course ID", "Course Name", "Course Description", "Grade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCourseAssignments);

        lblCourseID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblCourseID.setText("Course ID");

        lblCourseName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblCourseName.setText("Course Name");

        txtGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGradeActionPerformed(evt);
            }
        });

        lblGrade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblGrade.setText("Grade");

        txtStudentIDTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentIDTranscriptActionPerformed(evt);
            }
        });

        lblCurrentSemester1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblCurrentSemester1.setText("Current Semester");

        lblStudentIDTranscript.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblStudentIDTranscript.setText("Student ID");

        comboSemester1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Semester", "Fall 2022", "Winter 2022", "Spring 2023", "Summer 2023", "Fall 2023", "Winter 2023", "Spring 2024", "Summer 2024", "Fall 2024", "Winter 2024", " " }));
        comboSemester1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSemester1ActionPerformed(evt);
            }
        });

        btnUpdateGrade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnUpdateGrade.setText("UPDATE");
        btnUpdateGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateGradeActionPerformed(evt);
            }
        });

        lblStudentFirstName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblStudentFirstName.setText("Student Name");

        txtCourseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCourseIDActionPerformed(evt);
            }
        });

        btnViewGrade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnViewGrade.setText("VIEW");
        btnViewGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewGradeActionPerformed(evt);
            }
        });

        lblCourseDescription.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblCourseDescription.setText("Course Description");

        btnSendGrades.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSendGrades.setText("SEND GRADES");
        btnSendGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendGradesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentWorkAreaPanel1Layout = new javax.swing.GroupLayout(studentWorkAreaPanel1);
        studentWorkAreaPanel1.setLayout(studentWorkAreaPanel1Layout);
        studentWorkAreaPanel1Layout.setHorizontalGroup(
            studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(studentWorkAreaPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblCurrentSemester1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboSemester1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(studentWorkAreaPanel1Layout.createSequentialGroup()
                .addContainerGap(213, Short.MAX_VALUE)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentWorkAreaPanel1Layout.createSequentialGroup()
                        .addComponent(lblStudentIDTranscript, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtStudentIDTranscript, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentWorkAreaPanel1Layout.createSequentialGroup()
                        .addComponent(lblCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentWorkAreaPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(studentWorkAreaPanel1Layout.createSequentialGroup()
                                .addComponent(lblGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentWorkAreaPanel1Layout.createSequentialGroup()
                                .addComponent(lblCourseDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCourseDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentWorkAreaPanel1Layout.createSequentialGroup()
                                .addComponent(lblStudentFirstName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtStudentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentWorkAreaPanel1Layout.createSequentialGroup()
                                .addComponent(lblCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(230, 230, 230))
            .addGroup(studentWorkAreaPanel1Layout.createSequentialGroup()
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(studentWorkAreaPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnSendGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, studentWorkAreaPanel1Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(btnUpdateGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        studentWorkAreaPanel1Layout.setVerticalGroup(
            studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentWorkAreaPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrentSemester1)
                    .addComponent(comboSemester1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudentFirstName)
                    .addComponent(txtStudentFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudentIDTranscript)
                    .addComponent(txtStudentIDTranscript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCourseID))
                .addGap(15, 15, 15)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCourseName))
                .addGap(18, 18, 18)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseDescription)
                    .addComponent(txtCourseDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGrade)
                    .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(studentWorkAreaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSendGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
        );

        studentSplitPane1.setRightComponent(studentWorkAreaPanel1);

        javax.swing.GroupLayout gradesPanelLayout = new javax.swing.GroupLayout(gradesPanel);
        gradesPanel.setLayout(gradesPanelLayout);
        gradesPanelLayout.setHorizontalGroup(
            gradesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradesPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(studentSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        gradesPanelLayout.setVerticalGroup(
            gradesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        rightPane.add(gradesPanel, "card3");

        DashboardPanel.setRightComponent(rightPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DashboardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1049, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DashboardPanel))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGradesActionPerformed
        // TODO add your handling code here:
        workAreaPanel.setVisible(false);
        gradesPanel.setVisible(true);
        

    }//GEN-LAST:event_btnGradesActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        switchToMainFrame();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void txtGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGradeActionPerformed

    private void txtStudentIDTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentIDTranscriptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentIDTranscriptActionPerformed

    private void txtCourseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCourseIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCourseIDActionPerformed

    private void btnUpdateGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateGradeActionPerformed
        // TODO add your handling code here:
        int selected = tblCourseAssignments.getSelectedRow();

        if (selected < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update!");
            return;
        }
        
        String studentFirstName = txtStudentFirstName.getText();
        String studentID = txtStudentIDTranscript.getText();
        int courseID = Integer.parseInt(txtCourseID.getText());
        String courseName = txtCourseName.getText();
        String courseDescription = txtCourseDescription.getText();
        Float grade = Float.parseFloat(txtGrade.getText());
        
        CourseAssignment ca = ecoSystem.getCourseAssignmentRef().getCourseAssignmentDirectory().get(selected);
        
        
      ecoSystem.getStudentDirectoryRef().getStudentDirectory()
                  .stream().filter(s -> s.getStudentID()==ca.getStudentID())
               .findFirst().orElse(null).setPersonName(studentFirstName);
        ca.setStudentID(studentID);
        ca.setCourseID(courseID);
        ecoSystem.getCourseDirectoryRef().getCourseDirectory()
                    .stream().filter(s -> s.getCourseID()==ca.getCourseID())
                    .findFirst().orElse(null).setCourseName(courseName);
        ecoSystem.getCourseDirectoryRef().getCourseDirectory()
                    .stream().filter(s -> s.getCourseID()==ca.getCourseID())
                    .findFirst().orElse(null).setCourseDescription(courseDescription);
        ca.setProfessorName(person.getPersonName());
        ca.setGrade(grade);
        
        JOptionPane.showMessageDialog(this, "Student grade updated successfully!");
        
        
        txtStudentFirstName.setText("");
        txtStudentIDTranscript.setText("");
        txtCourseID.setText("");
        txtCourseName.setText("");
        txtCourseDescription.setText("");
        txtGrade.setText("");
        
        
         
         
    }//GEN-LAST:event_btnUpdateGradeActionPerformed

    private void comboSemester1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSemester1ActionPerformed
        // TODO add your handling code here:
//        Course course = null;
        //System.out.println("called");
        if(comboSemester1.getSelectedItem()!=null){
                String currentSemester = comboSemester1.getSelectedItem().toString();
                if(!currentSemester.equalsIgnoreCase("Select Semester")){
                    List<Course> courseBySem = ecoSystem.getCourseDirectoryRef().getCourseDirectory()
                            .stream().filter(c-> c.getSemester().equalsIgnoreCase(currentSemester)
                                    &&(c.getProfessorName().equalsIgnoreCase(person.getPersonName()))).toList();
                    //System.out.println(courseBySem.size());
                    Course course = courseBySem.get(0);
                    List<CourseAssignment> courseAssignments = ecoSystem.getCourseAssignmentRef().getCourseAssignmentDirectory()
                        .stream().filter(ca -> ca.getCourseID() == course.getCourseID()).toList();
                    System.out.println(courseAssignments.size());
                populateCourseAssignmentsTable(courseAssignments);
                    
                }
                
                
            }
        
        
    }//GEN-LAST:event_comboSemester1ActionPerformed

    private void btnLogoutTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutTranscriptActionPerformed
        // TODO add your handling code here:
          switchToMainFrame();
    }//GEN-LAST:event_btnLogoutTranscriptActionPerformed

    private void btnViewGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewGradeActionPerformed
        // TODO add your handling code here:
         int selected = tblCourseAssignments.getSelectedRow();

        if (selected < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update!");
            return;
        }
        
        CourseAssignment ca = ecoSystem.getCourseAssignmentRef().getCourseAssignmentDirectory().get(selected);
        
        txtStudentFirstName.setText(ecoSystem.getStudentDirectoryRef().getStudentDirectory()
                  .stream().filter(s -> s.getStudentID().equals(ca.getStudentID()))
               .findFirst().orElse(null).getPersonName());
        txtStudentIDTranscript.setText(ca.getStudentID());
        txtCourseID.setText(String.valueOf(ca.getCourseID()));
        txtCourseName.setText(ecoSystem.getCourseDirectoryRef().getCourseDirectory()
                    .stream().filter(s -> s.getCourseID()==ca.getCourseID())
                    .findFirst().orElse(null).getCourseName());
        txtCourseDescription.setText(ecoSystem.getCourseDirectoryRef().getCourseDirectory()
                    .stream().filter(s -> s.getCourseID()==ca.getCourseID())
                    .findFirst().orElse(null).getCourseDescription());
       txtGrade.setText(String.valueOf(ca.getGrade()));
        
        
        
        
    }//GEN-LAST:event_btnViewGradeActionPerformed

    private void btnSendGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendGradesActionPerformed
       try {
           // TODO add your handling code here:
           
           int selected = tblCourseAssignments.getSelectedRow();
           
           if (selected < 0) {
               JOptionPane.showMessageDialog(this, "Please select a row to send grades!");
               return;
           }
           
           CourseAssignment ca = ecoSystem.getCourseAssignmentRef().getCourseAssignmentDirectory().get(selected);
           
           Properties properties = new Properties();
           properties.put("mail.smpt.auth", true);
           properties.put("mail.smtp.host", "smtp.gmail.com");
           properties.put("mail.smtp.port",587);
           properties.put("mail.smtp.starttls.enable", true);
           properties.put("mail.transport.protocol", "smtp");
           
           
           
           
           Session session = Session.getInstance(properties, new Authenticator(){
               
               @Override
               protected PasswordAuthentication getPasswordAuthentication(){
                   return new PasswordAuthentication("khokawalaz@gmail.com", "Vespazk@1997");
                   
               }
               
           });
           
           Message message = new MimeMessage(session);
           message.setSubject("Your grades have been posted!");
           message.setText("Grade is 3");
           
           Address addressTo = new InternetAddress(ecoSystem.getStudentDirectoryRef().getStudentDirectory()
                   .stream().filter(s -> s.getStudentID()==ca.getStudentID())
                   .findFirst().orElse(null).getPersonEmailAddress());
           System.out.println(addressTo);
           
           message.setRecipient(Message.RecipientType.TO, addressTo);
           Transport.send(message);
       } catch (MessagingException ex) {
           Logger.getLogger(ProfessorDashboard.class.getName()).log(Level.SEVERE, null, ex);
       }
        
        
    }//GEN-LAST:event_btnSendGradesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane DashboardPanel;
    private javax.swing.JButton btnBackTranscript;
    private javax.swing.JButton btnGrades;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnLogoutTranscript;
    private javax.swing.JButton btnSendGrades;
    private javax.swing.JButton btnUpdateGrade;
    private javax.swing.JButton btnViewGrade;
    private javax.swing.JComboBox<String> comboSemester1;
    private javax.swing.JPanel gradesPanel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCourseDescription;
    private javax.swing.JLabel lblCourseID;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblCurrentSemester1;
    private javax.swing.JLabel lblGrade;
    private javax.swing.JLabel lblManageGrades;
    private javax.swing.JLabel lblStudentFirstName;
    private javax.swing.JLabel lblStudentIDTranscript;
    private javax.swing.JPanel leftPane;
    private javax.swing.JPanel navigateBackPanel1;
    private javax.swing.JLayeredPane rightPane;
    private javax.swing.JSplitPane studentSplitPane1;
    private javax.swing.JPanel studentWorkAreaPanel1;
    private javax.swing.JTable tblCourseAssignments;
    private javax.swing.JTextField txtCourseDescription;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtStudentFirstName;
    private javax.swing.JTextField txtStudentIDTranscript;
    private javax.swing.JLabel workAreaPane;
    private javax.swing.JPanel workAreaPanel;
    // End of variables declaration//GEN-END:variables

       private void switchToMainFrame() {
        this.setVisible(false);
        MainJFrame mainFrame = (MainJFrame) SwingUtilities.getRoot(this);
        mainFrame.removeProfessorDashboard();
        mainFrame.setVisible(true);
    }


    private void populateCourseAssignmentsTable(List<CourseAssignment> courseAssignments) {
          DefaultTableModel model = (DefaultTableModel) tblCourseAssignments.getModel();
        model.setRowCount(0);
        for(CourseAssignment courseAssignment : courseAssignments){
            Object[] rowData = new Object[6];
            rowData[0] = ecoSystem.getStudentDirectoryRef().getStudentDirectory()
                    .stream().filter(s -> s.getStudentID()==courseAssignment.getStudentID())
                    .findFirst().orElse(null).getPersonName();
            System.out.println(rowData[0]);
            rowData[1] = courseAssignment.getStudentID();
            System.out.println(rowData[1]);
            rowData[2] = courseAssignment.getCourseID();
            System.out.println(rowData[2]);
            rowData[3] = ecoSystem.getCourseDirectoryRef().getCourseDirectory()
                    .stream().filter(s -> s.getCourseID()==courseAssignment.getCourseID())
                    .findFirst().orElse(null).getCourseName();
            System.out.println(rowData[3]);
            rowData[4] = ecoSystem.getCourseDirectoryRef().getCourseDirectory()
                    .stream().filter(s -> s.getCourseID()==courseAssignment.getCourseID())
                    .findFirst().orElse(null).getCourseDescription();
            System.out.println(rowData[4]);
            rowData[5] = String.valueOf(courseAssignment.getGrade());
            System.out.println(rowData[5]);
            model.addRow(rowData);
        }
        
    }
    
   
    

}
